// 단일 페이지 애플리케이션 만들기

// 리액트 애플리케이션의 페이지 전환은 단일 페이지 애플리케이션 방식으로 개발하는 것이 정석이다.
// 단일 페이지 애플리케이션은 초기 요청 시 서버에서 첫 페이지를 처리하고 이후의 라우팅은 클라이언트에서 처리하는 웹 애플리케이션이다.
// 전통적인 방식의 웹 페이지는 페이지를 전환할 때마다 렌더링 결과를 서버에서 받기 때문에 화면이 깜빡이는 단점이 있었다.
// 단일 페이지 애플리케이션은 페이지 전환에 의한 렌더링을 클라이언트에서 처리하기 때문에 마치 네이티브 애플리케이션처럼 자연스럽게 동작한다.


// 즉 싱글페이지애플리케이션은 처음 요청에만 html 파일 및 에플리케이션 렌더링에 필요한 전체 파일을 다 받고( 그래서 초기에는 느리다.)
// 그 다음 부터는 필요한 데이터만 요청해서 받고, 나머지는 클라이언트쪽 pc에서 모든 렌더링이 이뤄진다. 
// 페이지 전환시에도 필요한 데이터만 json으로 받고, 자체 라우팅을 가지고 있다. 이 모든 라우팅 형태는 초기요청시 다 포함해서 받는다.

// 싱글페이지애플리케이션을 구현하기 위해선 브라우저 히스토리API 를 먼저 알아야 한다.
// 그 다음 브라우저 히스토리 API를 기반으로 구현된 react-router-dom 패키지를 이용해서 리액트 싱글 페이지 애플리케이션을 만들어 보자

// 즉 우리는 브라우저 히스토리API와, 리액트 라우터 사용방법을 배워볼 것이다.



// 싱글페이지애플리케이션 구현이 가능하려면 다음 두 가지 기능이 필요하다.
// 1. 자바스크립트에서 브라우저로 페이지 전환 요청을 보낼 수 있다. 단 브라우저는 서버로 요청을 보내지 않아야 한다.
// 2. 브라우저의 뒤로 가기와 같은 사용자의 페이지 전환 요청을 자바스크립트에서 처리할 수 있다. 
//    이때도 브라우저는 서버로 요청을 보내지 않아야 한다.

// 한마디로 스크립트 단에서 페이지 전환 요청을 보낼수 있고, 또 스크립트 단에서 그 요청을 받아 처리 할 수 있어야한다.
// 단, 브라우저는 서버로 요청을 보내지 않아야 한다.

// 이러한 조건을 만족하는 브라우저 API는 pushState, replaceState 함수와 popstate 이벤트이다.
// 브라우저는 히스토리에 state를 저장하는 스택이 존재한다.
