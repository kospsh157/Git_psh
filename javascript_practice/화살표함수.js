/* tslint:disable */
// 화살표 함수의 콜백 구조를 살펴보자

// 실험을 위해 아무 함수 하나 만들기
const es6 = () => {
    console.log('작동!');
};


// 화살표함수로 함수를 정의하는 구간에서는 매개변수로 화살표함수를 넣을 수 없다.
// 그냥 함수를 정의하는 부분에서는 안에다가 새로운 함수를 또 정의할 수는 없다.
// 이거는 화살표함수든, 일반함수든 상관없이 적용되는 규칙이다.
const abc = (  ) => {}; 
const abcd = function test(){};


// 단 이미 있는 함수를 호출해서 쓸 때에는, 매개변수로 함수를 정의해서 가져오든 화살표함수로 정의해서 쓰든 
// 전부 다 가능하다. 
es6( (()=> {console.log("어느것이111111")})() , es6(), (function es5(){return console.log('어느것이22222222')})());
// 나의 예상
/*
    어느것이1111
    작동!
    어느것이2222
    작동!
*/
// 위 실행이 맞다. 다만 매개변수로 주어지는 함수는 이미 만들어지는 것을 호출하는게 아닌 이상 호출되지는 않는다.
// 즉, 위에서는 '즉시실행' 표현식으로 했기 때문에 호출이 되는 것이고, 화살표함수이든 일반함수이든 그냥 정의만하면 
// 매개변수 안에서 호출되거나 실행되지는 않는다. 




