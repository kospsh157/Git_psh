/*
    알고리즘 분석

    <알고리즘이란?>
    1. 주관적이거나 모호한 것은 알고리즘이 아니다.
    2. 가능한 명료하고 모호하지 않아야 한다.
    3. 그렇다고 알고리즘 === 코드는 아니다. 
    4. 알고리즘은 문제를 해결하는 방법 그 자체이다.
    5. 따라서 같은 문제를 해결하는데 여러가지 알고리즘이 있을 수 있고, 우리는 그래서..어떤게 가장 좋은 알고리즘인지 분석해서 파악해야한다.


    <알고리즘 평가>
    1. 평가의 기준이 되는 것은 "시간"과 "메모리 공간" 그리고 "정당성" 이다.
        1. 시간
            1. 여러 알고리즘의 수행 속도와 특성을 분석하는 능력을 키워야 한다.
        2. 공간
            1. 더 적은 용량을 사용하수록 좋다. 특히 알고리즘 문제에는 제한된 메모리가 주어진다.
        3. 정당성
            1. 어떤 알고리즘이 목적 해결에 도달할 수 있는 알고리즘인지 아니지의 유무이다.
            2. 매우 기본적으로, 틀린 답을 도출하는 알고리즘은 속도와 공간을 따지기 이전에, 이미 틀린 답이다.
    2. 이 두 기준 시간과 공간은 서로 상충하는 경우가 많다.
        1. 메모리 사용량을 늘리면 속도가 빨라지고
            1. 특히 요즘은 메모리가 여유로워졌기 때문에 많은 메모리를 사용하여 속도를 높이는 알고리즘이 더 중요하고
            대표적으로 동적 계획법이 있다.
        2. 속도를 희생해서 메모리 사용량을 줄일 수 있다. 


    3. 앞으로 우리는 속도와 정당성을 증명하는 기술들에 집중할 것이다. 이 두 가지가 가장 중요하기 때문이다.


    <알고리즘의 시간 복잡도 분석>
    1. 반복문이 시간복잡도의 주 척도가 된다.
    
    2. 대표적인 수행 시간의 형태 
        1. 선형시간 알고리즘 
            1. 주어진 입력 데이타를 하나당 한번씩 검사 혹은 조작하는 형태의 알고리즘 

        2. 선형이하 시간 알고리즘 ( 선형시간 보다 훨씬 더 빠른 알고리즘 )
            0. 로그 함수는 굉장히 느리게 증가하는 함수이다. 입력의 크키가 커지는 것보다 수행시간이 느리게 증가하는 알고리즘을 
            선형 이하 시간 알고리즘이라고 한다.
            1. 주어진 입력 데이타를 하나당 한번씩 보는 것도 아니고, 주어진 데이타의 일부분만 검사 혹은 조작하는 형태의 알고리즘
            2. 대표적으로 이진탐색 알고리즘이 있음.
                1. 주어진 입력데이타 수 N을 계속 2로 나누어 반만 검사하고 반은 그냥 버리는 형태
                2. 주어진 N을 1이 될 때 까지 계속 2로 나누는데 몇번을 나눠야 하는지 알려주는 함수가 2를 밑수로하는 log N 함수임
                3. 이진 탐색 알고리즘 정의
                    1. 오른차순으로 정렬된 배열 A에서 찾고 싶은 값 x가 주어질 때 A[i-1]<x<=A[i] 인 i를 반환한다. 
                    2. 위의 말 뜻은 즉 배열 A에서 x를 삽입할 수 있는 위치 중 가장 앞에 있는 것을 반환한다.
                    3. 따라서 새원소를 삽입한다는 뜻은 배열에서 i번째와 그 이후의 원소들을 뒤로 한 칸씩 밀고 들어간다는 뜻 
                    4. 따라서 A에 x가 존재하는 경우 x의 위치를 반환하고 없는 경우, x보다 큰 첫번째 원소를 반환한다.
                    5. 이진 탐색 알고리즘에 입력값으로 어떤 배열을 통으로 준다는 것은 이진탐색알고리즘을 제대로 쓰고 있는 것이 아니다.
                        1. 입력값으로 통 배열을 주는게 아니라,찾아야하는 i값을 주면 A[i]을 구할 수 있는 수식을 만들어서 로직을 짜야한다.
                        2. 이진탐색 알고리즘의 구현을 생각보다 까다롭다. 버그가 특히 많이 일어날 수 있다. 

        3. 지수시간 알고리즘 
            1. 다항 시간 알고리즘 
                1. N과 N^2, N의 거듭제곱들로 이루어진 반복문을 가지고 있는 알고리즘 
                2. N과 N^100 도 같은 다항시간 알고리즘이지만 굉장한 속도 차이가 있다. 
                3. 다항시간 알고리즘 보다 훨씬 오래 걸리는 알고리즘이 있다. 
                4. 재귀 호출 
                    1. 여러 개의 답이 있고 그 중 가장 좋은 답을 찾는 문제들을 풀 때 재귀호출을 많이 이용한다.
                    2. 재귀 호출은 전체 틀에서 반복적으로 일어나는 어떤 현상을 로직으로 짜고 입력으로 전체들의 일부분만 받아 
                    나머지(모든) 현상에도 같은 로직을 적용하여, 이 중 가장 좋은 답을 반환하는 역할을 한다. 

    



*/

