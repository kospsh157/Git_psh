

'use strict'

// << 자바스크립트 진수 변환 함수 >>
// 십진수로 바꿀려면 parseInt() 사용, 임의 진수로 바꿀려면 toString()사용 

// 10진수 >>> 2진수 
let dec = 25;
let bin = dec.toString(2) 

// 2진수 >>> 10진수 
let bin1 = 11001
let dec1 = parseInt(bin, 2) 

// 2진수 >>> 16진수 (10진수로 바꿨다가 16진수로 바꾼다.)
let bin2 = 11001;
let hex = parseInt(bin2, 2).toString(16) 


// 16진수 >>> 2진수 (10진수로 바꿨다가 2진수로 바꾼다.)
let hex1 = '7b'    // 16진수는 스트링형태로 써야한다. 
let bin3 = parseInt(hex1, 16).toString(2)
console.log(bin3)


// 16진수에서 a,b,c,d,e,f 각각 2진수 로 했을때 (외워라)
// a = 1010 , b = 1011, c = 1100, d = 1101, e = 1110, f = 1111
// 16진수 한자리는 이진수로 했을때 최대 4자리를 차지함  그래서 이진수를 4자리씩 끊어서 적는 경우가 많음 
// 1010 1011 1101 1101 1110 1111  = abcdef 

// 메모리 주소 한개는 1바이트를 가리키므로 ( 메모리 한 빈방 하나가 1바이트라는 소리 )
// 따라서 32비트 컴퓨터는 2^32 개의 주소값을 가지고, 최대 2^32 바이트를 램의 최대용량으로 가질 수 있다. 
// 2^32바이트가 약4기가바이트이다. 따라서 32비트 컴퓨터의 최대 메모리 용량이 4기가인 것이다.


// 컴퓨터는 음수를 2의 보수로 표현한다.
// 일단 이진수로 바꾸고 >> 1의 보수를 찾는다 >> 1의 보수에 1를 더하면 2의보수가 된다.
// 쉽게 문제를 풀때는 이진수로 바꾸고 >> 역수로 치환 >> +1 >> 2의보수가 된다. 

// 8비트 컴퓨터의 정수 가능 표현 개수는 2^8이 아니다. 음수의 존재때문에 절반이 음수로 떨어져나간다. 
// 256 의 절반 -128~127까지 이다.


// 정규화 : 소수점 왼쪽에 있는 수가 밑수 미만으로 만들어서 가수 * 밑수^지수로 표현하는 것

// 단정도 부동소수점은 32비트에서
// 배정도 부동소수점은 64비트에서 
// 64비트에서는 부호1비트 / 지수부 11 비트 / 가수부 52비트로 구성됨  순으로 구성되어있음. (순서지켜야함)
// 부동소수점 표현 방식 :  1.man * 2^exp-bias   (man은 가수부, exp-bias는 지수부)
// 지수부 11비트이면 2^11 개를 표현 할 수 있다. 11111111111(11개) 는 십진수로 2^10 + 2^9 + 2^8 + ... + 2^1 + 1 = 이고 계산을 쉽게하기위해서
// 100000000000(12자리) 를 계산하고 -1를 해주면 된다.
// 2^11-1 은 2048-1= 2047이다. 그런데 지수도 음의 표시를 해야하므로 실제 표기량은 절반으로 줄어든다.
// -1023~1023   
// bias 쉽게 구하는 법은 2^(n-1) - 1 이다. 여기서 n은 표기가능한 비트수이다. 만약 지수부가 4비트 자리만 허용된다면 bias = 7이된다.
// bias는 지수의 음수표현을 위한 것이다. bias기준으로 0이고 bias 미만으로 음수가 된다. 
// 따라서 실제 지수가 2라면 exp - bias = 2라는 뜻이고 exp = 2 + bias 이다 여기선 bias가 7이므로 
// 부동소수점 지수로들어가야할 exp값은 = 9가 된다. 그리고 이것을 이진수로다시 바꾸면 실제로 부동소수표현에 지수부에들어가는 값을 알 수 있다.

// 십진수를 이진수로 정규화 하면 1.man * 2^exp-bias 가 되고 
// 부동소수점으로 표기할려면 지수부 비트수를 알아내서 bias를 구하고 
// exp - bias = 정규화했을때 지수
// 를 이용해서 exp를 구하고 이를 다시 이진수로 바꿔서 지수부에 입력해주면된다. 

// 부동소수점 표현은 수의 더 넒은 범위 표기를 위해 어느정도 정밀도를 포기한 표기법이다.

//엡실론 
// 1.수와 수 사이의 가장 작은 간격의 길이
// 2.현재 이 시스템에서 다룰수 있는 가장 작은 실수

// 수가 엄청나게 커지면 컴퓨터는 1.0 더하기도 인지하지 못할 수 있다. 









