const example = { a: 123, b:{c:14, d:134}};
const a = example.a;
const b = example.b.d; 

// 코딩을 하다보면 위와같은 현상이 자주 일어난다.
// 쓰이지도 않는 example를 그 안의 속성에 접근하기 위하여 어쩔 수 없이 계속 사용하게 된다. 
// 위와 같은 현상을 없애기 위한 편의성으로 es6에서는 비구조화 할당을 지원한다.

// 구조 분해 문법
const {a, b:{d}} = example;         // 이렇게 해도 위와 똑같이 변수 a, b를 사용 할 수 있다.
                                    // example 에서 구조를 분해해서 원하는 속성을 꺼내서 변수 선언을 하는 것이다.

// 배열도 구조분해 할당이 된다.
arr = [1,2,3,4,5];
const x = arr[0];
const y = arr[1]; 

const [x,y, , , z] = arr;  
// 위와 같이 구조분해 할당을 하면 arr배열의 0,1 인덱스를 순서에 맞게 x,y 변수에 할당하고, 2,3인덱스는 할당을 하지 않고 건너뛰고
// 4번째 인덱스를 z라는 변수에 할당한다는 뜻이다.
// 배열을 자리가 똑같아야 하고
// 객체일 경우, key(속성명)를 일치시켜야 한다. 


// 구조분해 할당 실수1 
// this가 들어가 있는 객체에 대해서 구조분해 할당 하게되면 의동한대로 작동하지 않는다. 
// 객체에 this가 들어가 있으면 사용하지 말자

const example3 = {
    name : 'psh',
    print(){
        console.log(this.name);
    }
}

example3.print();