// 4장은 실제 서버 동작에 필요한 쿠키와 세션 처리와
// 요청주소별 라우팅 방법에 대해 배운다.

// http 서버가 있어야 웹 브라우저의 요청을 처리할 수 있다.
// http 모듈에는 createServer 메서드가 있다. 인수로 요청에 대한 콜백 함수를 넣을 수 있다.

// 서버에는 
/*
    1. 요청을 받는 부분과
    2. 그 요청에 대한 응답을 보내는 부분이 있어야 한다.
    3. 클라이언트로부터 요청이 왔을 때 어떤 작업을 수행할지 이벤트 리스너를 미리 등록해두어야 한다.
*/

const http = require('http');


http.createServer( (req, res) => {
    // 여기에 어떻게 응답할지 적습니다.
    // 여기에는 클라이언트가 8080포트로 붙으면, 그때 응답되는 코드이다.
    res.writeHead(200, {'Content-Type':'text/html; charset=utf-8'});
    res.write('<h1>Hello Node!</h1>');
    res.end('<p>Hello Server!</p>');
})
    .listen(8080, () => {
        // 서버연결
        // 서버가 실행되면 다음 문구가 로그로 보인다.
        console.log('8080번 포트에서 서버 대기 중입니다.');
    });

// http 모듈
/*
    1. createServer 메서드에 인수로 요청에 대한 콜백함수를 넣을 수 있다.
    2. 요청이 들어올 때마다 매번 콜백 함수가 실행된다.
    3. 따라서 이 콜백 함수에 응답을 적으면 된다.

    4. createServer 콜백에는 req와 res 매개변수가 있다. 
    5. req객체는 요청에 관한 정보들을, res 객체는 응답에 관한 정보들을 담고 있다.
*/


// res.writeHead 객체
/*  
    res.writeHead와 res.write, res.end메서드가 있다.
    res.writeHead는 응답에 대한 정보를 기록하는 메서드이다.
    첫 번째 인수로 성공적인 요청임을 의미하는 200을,
    두 번째 인수로는 응답에 대한 정보를 보내는데 콘첸트의 형식이 html임을 알리고 있다.
    또한 한글 표시를 위해 charset을 utf-8로 지정했다.
    이 정보가 기록되는 부분을 헤더(header) 라고 부른다.
*/

// res.write 객체
/*
    첫 번째 인수는 클라이언트로 보낼 데이터이다.
    지금은 html 모양의 문자열을 보냈지만, 버퍼를 보낼 수도 있다.
    또한 여러 번 호출해서 데이터를 여러 개 보내도 된다.
    데이터가 기록되는 부분을 본문(body) 라고 부른다.
*/

// res.end 객체
/*
    응답을 종료하는 메서드이다.
    만약 인수가있다면, 그 데이터도 클라이언트로 보내고 응답을 종료한다.
    브라우저는 다시 받은 응답 내용을 렌더링해서 사용자에게 시각적으로 나타낸다.
*/