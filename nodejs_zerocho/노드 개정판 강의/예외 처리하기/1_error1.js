// 예외 처리하기 

/*
    1. 노드의 메인 스레드는 하나뿐이므로, 그 하나의 소중한 스레드를 보호해야 한다.
    2. 이는 전체 메인서버가 멈춘다는 의미이다.
    3. 따라서 에러를 처리하는 방법을 알아야 한다. 에러 로그가 기록되더라도, 작업은 계속 진행되어야 한다.
    4. 다음 예제에는 코드 문법상의 에러는 일단 없다고 가정한다. 서버 코드에 문법상의 에러가 있다는 것은 기본적으로 이치에 맞지 않다.
*/


// 일단 try/catch문으로 감싸면 된다.
// setInterval을 이용한 것은 프로세스가 멈추는지 여부를 체크하기 위해서이다. 
// 프로세스가 에러로 인해 멈추면 setInerval도 멈출 것이다.
// setInerval 내부에 throw new Error() 써서 에러를 강제로 발생시켰다. 
setInterval( () => {
    console.log('시작');
    try {
        throw new Error('서버를 고장내주마!');
    }catch(err){
        console.log(err);
    }
}, 1000);


// try구문으로 묶어서 에러가 일어나도 노드 프로세스는 죽지 않는다. (계속 setInterval이 실행된다.)
// 2_error2.js 를 통해 노드 자체에서 잡아주는 에러도 알아보자.