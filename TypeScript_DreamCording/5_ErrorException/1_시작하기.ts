// 에러

/*
    1. 키 포인트 : 예상된 에러 ( Error State ) 인지, 예외적인, 예상치 못한 에러( Exception Error )인지
    구분해야 한다.
    2. 예외적 에러와, 예상된 에러의 처리가 서로 다르게 해야 한다. 각각 무슨 차이가 있고 어떻게 처리해야 하는지 알아보자

*/


// 에러 담당 클래스
/*
    1. 자바에서는 : Exception 클래스가 있음
    2. 자바스크립트 및 타입스크립트에서는 : Error 클래스가 담당
*/


// 에러는 404 같은 것이 예상된 에러이고, 
// 프로그램에서 잘못된 쓰임과, 코딩때문에 불현듯 생겨난 것을 익셉션 에러, 즉 예상치 못한 에러라고 한다.
// 주로 사용자가 의도된 코드를 의도대로 쓰지 않고 아무렇게나 쓸 때, 일어난다.
 
// 스위치문 에러 활용
function move(direction: 'up' | 'down' | 'he' ){
    switch(direction){
        case 'up':
            position.y =+ 1;
            break;
        case 'down':
            position.y =- 1;
            break;
        
        default :
            // 일반적으로는 컴파일 단계에서 에러를 확인 할 수 있도록 코드를 짠다.
            // 다음과 같이 말이다
            const invaild: never = direction;
            // 에러가 나는 이유는 위에 사용자가 he를 구현안했기 때문이다.
            // he를 구현했다면, 여기까지 올 이유가 없어서, never에 direction을 담아도 문제되지 않는다.
            // **흔히 이렇게 에러를 컴파일 단계에서 잡기 위해서 never 타입을 쓴다.
            // 사용자에게 컴파일 단계에서 뭔가 이상한 점을 알려주기 때문이다.
            
            throw new Error(`nundown direction : ${direction}`);
            // 위와 같이 바로 에러를 나게 유도할 수 있지만, 
            // 더 위에서와 같이 컴파일 단계에서 사용자가 인지 할 수 있겠금 하는 것이 더 좋다.
           
    }
}