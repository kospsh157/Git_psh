
// 먼저 OOP에 대해 알아보기 전에 잠깐 절차지향방식에 대해서 알아보자
// Imperative and Procedural Programming
/*
    1. 절차 지향 프로그램밍 방식을 일단 간단하게 알아보자
    2. 이는 어떤 목적을 달성하기 위한 함수와 데이터가 주인공인 절차방식이다.
    3. main() 함수에서 시작해서 여기에서 필요에 따라 기능이 있는 함수들을 호출한다. 
    4. 함수 내부에서는 전역적으로 설정된 변수(데이터)에 접근 가능하다.
    5. 순서대로, 절차적으로 함수가 하나씩 호출한다고해서 절차지향적 프로그램밍이라고 이름이 불렸다.
    6. 단점 : 
        1. 함수가 여러가지가 어떤 기능을 수행하기 위해서 조직적으로 묶여있고, 전체적인 이해가 먼저 필요하기 때문에
        만약에 하나를 수정하기 위해서는 전체적으로 다 살펴봐야한다.
        2. 한눈에 이해하기가 어렵다 > 유지보수, 확장이 힘들다.
    7. OOP 장점 
        1. 프로그램을 객체로 정의.
        2. 객체 끼리 의사소통하도록 디자인
        3. 서로 관련있는 함수나 데이터들을 하나의 객체로 묶어서 관리
        4. 유지보수가 상대적으로 쉬움 
        5. 관련된 객체만 반복사용, 수정만 하면 됨   >> 유지보수, 기능 추가, 수정이 쉬움

*/



// OOP
/*
    1. 객체는 객체 단위로, 속성(데이터), 함수(행동)으로 구성되어 있다.
    2. 어떤 목표가 있다면, 그 목표만 행하는 객체만 만들어서 관리 할 수 있다.
    3. 추상적인 개념/ 물리적인 개념들도 다 객체로 만들어서 관리할 수 있다. 
    4. 프로퍼티 == 필즈 , 함수 == 메소드 
    5. 객체의 이름은 꼭 명사로 한다.
    6. 클래스를 이용해서 객체를 정의한다. 
    7. 오브젝트(객체)는 클래스의 인스턴스이다.
    8. 클래스는 어떻게 생겨야 하는지를 묘사한다.
    9. 중요한 4가지 원칙
        1. Encapsulation 
            1. 절차지향에서는 데이터와 함수들이 섞여있다.
            2. OOP에서는 관련있는 것끼리는 하나의 캡슐로 묶여 있다.
            3. 외부에 보일 필요 없는 데이터와 있는 데이터는 잘 구분해서 접근 할 수 없게 만든다. 
            4. 개발자가 의도한 대로만 내부함수나 외부 함수가 어떤 객체의 내부 데이터가 변할 수 있도록 관리한다.
        2. Abstraction
            1. 내부의 복잡한 기능을 다 이해하지 않고 외부에서 인터페이스를 통해서 사용할 수 있다.
            2. 추상화를 통해서 내부의 구조를 다 이해하지 않고도, 외부의 인터페이스(사용방법만) 알아서 목적을 이룰수있다.
        3. Inheritance
            1. 재사용가능! 
            2. parent, super, base : 부모 클래스
            3. child, sub, derived : 자식 클래스
            4. IS-A 관계 : 부모 클래스와 자식클래스는 서로 같은 부모 클래스라고 볼 수 있다.
            5. DOM요소도 다 상속관계로 이뤄져 있다.
            
        4. Polymorphism
            1. 상속 관계에서 일어나는 변화현상
            2. 부모는 언제든 자식을 품을 수 있다. = 타입에 있어서 부모 클래스로 항상 자식 클래스를 담을 수 있다.
            3. 자식에서는 부모를 오버라이드해서 자신만의 특징을 가질 수 있다. 이런면에서 볼 때 다형성은 
            하나의 부모 클래스에서 출발하지만, 결국 상속 과정을 거치다보면, 최종적으로는 다양한 형태의 기능과 데이터를 
            가지게 된다. 
*/