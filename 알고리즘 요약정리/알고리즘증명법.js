/*
    알고리즘 증명을 위한 수학이론을 배워야하는 이유는
    1. 알고리즘 문제를 풀 때, 어떤 알고리즘을 써야할지 떠올려야하는데 알고리즘 증명법을 배우면 어떤 문제에 어떤 알고리즘을
    쓰고 떠올려야하는지, 감을 익힐 수 있다. 
    2. 내가 짠 알고리즘이 잘 작동할지, 나에게 확신을 줄 수 있는 직관력이 생긴다. 

    위와같은 이유로 알고리즘 정당성 증명에서 흔하게 나타나는 패턴들을 소개한다. 


    1. 수학적 귀납법 반복문 불변식
        1. 귀납법
            0. 대부분의 알고리즘은 어떤형태로는 반복적인 요소를 가지고 있다. 따라서 귀납법은 정당성을 증명할때
            가장 유용하게 사용되는 기법이다. 
            1. 증명하고 싶은 사실을 여러 단계로 나눈다. 
            (똑같은 일이 반복되는 단계형식으로)
            2. 첫 단계에서 내가 증명하고 싶은 내용이 성립함을 보인다. 
            3. 한 단계에서 성립한다면, 다음 단계에서도 성립함을 보여준다. 
            (그래서 그 반복되는 현상이 끝까지 일어나도, 변하지 않아야 할것은 변하지 않고, 변해야 할 것은 
            당연히 변화하는 모습을 보여준다. )
        2. 반복문 불변식
            0. 귀납법으로 알고리즘의 정당성을 보일려면 반복문과 불변식 패턴으로 생각하면 된다. 
            1. 귀납법으로 정당성을 확인 할 때 반복문 불변식의 개념이 유용하게 쓰인다. 
            2. 반복문 진입시, 불변식이 성립함을 보인다. 
            3. 반복문내용이 실행되도, 다 돌고 끝나도, 불변식이 변화하지 않는 것을 보인다. 
            4. 반복문이 다 돌았음에도 불변식이 바뀌지 않았으면, 정답을 구했음을 보인다. 

    2. 귀류법
        1. 원하는 결과와 반대되는 상황을 가정하고 논리를 전개해서 결론이 잘못되었음을 찾아내는 기법. 
        2. 대개 어떤 답이 항상 최선임을 증명하고자 할 때 쓰인다. 
        3. 내가 선택한 답보다 더 좋은 답이 있다고 가정하고 논리를 진행시켜 그런일은 있을 수 없다.를 보이면 된다. 

    3. 비둘기집 원리
        1. 인구가 천만인 서울에 과연 머리숱이 정확히 일치하는 경우가 하나라도 있을까?
        2. 비둘기집원리를 적용하면 쉽게 풀 예측해 볼 수 있다. 
        3. 일단 최대치를 구해야한다. 머리숱이 아무리 많아도 100만가닥이라고 한다. 
        4. 그렇다면 서울에 인구의 최대치 1000만과 머리숱의 최대치 100만을 알면 비둘기집 원리를 사용할 수 있다. 
        5. 100만개의 집에 1000만개의 비둘기를 넣어보면 비둘기 수가 집의 수보다 압도적으로 많기 때문에 반드시 
        2마리 이상은 같은 집에 들어가게 된다. 
    
    4. 구성적 증명 
        1. 흔히 어떤 답이 존재한다는 사실을 증명하기 위해 사용된다. 
        2. 한마디로 답을 실제로 구해서 예시로 보여주거나, 답을 만드는 방법을 제시하는 것이다. 
        3. 예를 들어 비행기를 만들 수 있다고 수학적으로 증명하는게 아니라, 그냥 비행기를 만들어서 날리는 걸
        보여주는 것이다. 
        4. 구성적 증명은 상당히 직관적인 생각에 가깝다. 따라서 매우 방대하고 어렵지만 흔히 나도 모르게 
        자신에게 어떤 답이 존재한다는게 맞는지 확인해야 할 때 직관적으로 흔히 사용하는 기술이다. 




        삽입정렬을 예로 들어보자
        1. 배열이 있을때 두번째 인덱스부터 원소를 선택해서 선택된 원소 왼쪽에 있는 것들은 모두 정렬되어있는 상태라고 가정. 
        2. 그리고 왼쪽에있는 것들이 선택된 것과 하나씩 다 비교해봐서 선택된 것이 더 작은게 있다면 해당 원소와 자리바꿈을한다. 
        3. 이 짓을 반복한다. 
        4. 한 번 반복해서 왼쪽에 있는 배열 사이 어딘가 선택된 원소가 들어간다. 
        5. [10,9,8,7,1,2,3,5]
        6. while문을 진행하고 나면 불변식이 깨지지 않음을 이해해야한다. 
          

*/