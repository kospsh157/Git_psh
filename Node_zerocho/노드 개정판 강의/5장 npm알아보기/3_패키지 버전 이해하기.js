// 노드 패키지들의 버전은 항상 세 자리로 이뤄져있다.
// 그 이유는 SemVer방식의 버전 넘버링을 따르기 때문이다.
/*
    1. 가장 왼쪽 부터 첫째 자리이다.
    2. 첫 번째 자리는 major버전이다. 0이면 초기 개발 중이라는 뜻.
    1부터는 정식 버전을 의미한다.
    major버전은 하위 호환이 안 될 정도로 패키지의 내용이 수정되었을 때 올린다.
    1.5.0 일때, 2.0.0으로 업데이트 한다는 것은, 에러가 발생할 확률이 크다는 소리이다.
    3. 두 번째 자리는 minor버전이다.
    하위 호환이 되는 기능 업데이트를 할 때 올린다.
    1.5.0 에서 1.6.0 으로 버전을 올렸다면, 기존 1.5.0사용자가 업데이트 했을때, 아무 문제가 없어야 한다.
    4. 세 번째 자리는 patch버전이다.
    새로운 기능 추가가 아니라, 기존 기능에 문제가 있어 수정한 것을 내놓았을 때 patch 버전을 올린다.
    당연히 업데이트 후에 아무 문제가 없어야한다.

    다시 정리해 보면, 
    1. 0. 3
    (하위호환이 되지 않는 변경 사항) . (하위 호환이 되는 변경 사항) . (간단한 버그 수정)
    
    5. 새 버전을 배포한 후에는 그 버전의 내용을 절대 수정하면 안된다.
    만약 수정 사항이 생기면 반드시 그에 맞게 숫자를 올려줘야한다.

    6. 버전 앞에 특수 기호 ^, ~, >, < 같은 문자가 붙어 있는데, 이 뜻은 다음과 같다.
        npm i express@^1.1.1  이렇게 명령어를 치면 
        1.1.1 이상부터 2.0.0 미만 버전까지만 설치하라는 의미이다.
        즉 2.0.0의 설치를 막는다. 
        ^는 메이저 단위를 설정하는 옵션이다. 
        npm i express@1.x.x  와도 같은 표현이다.

        ~기호는 patch버전까지만 설치하거나 업데이트 한다. 
        npm i express@~1.1.1
        이는 1.1.1 부터 1.2.0 미만을 의미한다 
        npm i express@1.1.x 와 같은 표현이다.

        >, <, =, <=, >= 부등호 기호의 의미가 동일하게 해당 버전 이상,이하,초과,미만,동일한 버전을 설치하라는 뜻이다.

        추가적으로 @latest 도 많이 사용되는데 이는 가장 안정된 최신버전을 설치하라는 의미이다.

        @next 는 가장 최근 배포판 중에서 안정되지 않은 알파나 베타도 포함하여 설치하라는 의미이다. 

        알파나 베타 버전은 
        1.1.1-alpha.0 
        2.0.0-beta.1 처럼 표시하거나,
        출시 직전의 패키지에는 2.0.0-rc.0 처럼 rc(Release Candidate)가 붙기도 한다.
*/