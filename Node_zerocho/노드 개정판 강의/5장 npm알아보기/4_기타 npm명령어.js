// 기타 명령어
/*
    1. npm으로 설치한 패키지(=모듈)를 사용하다보면 새로운 기능이 추가되거나 버그를 고친 새로운 버전이 나올 때가 있다.
    2. npm outdated명령어로 업데이트할 수 있는 패키지가 있는지 확인해보면 된다.
    3. npm outdated
    를 할 시 만약 업데이트 할 패키지가 있다면  해당 패키지 이름과 버전이 나온다.
    Current와 Wanted가 다른 버전이면,업데이트가 필요한 상황이다.

    4. npm update 패키지 이름  을 치면 Wanted에 적히 버전으로 업데이트 된다.
    5. npm update 를 그냥 치면 가능한 모든 패키지가 업데이트 된다.

    6. latest는 해당 패키지의 최신 버전이지만, package.json에 적힌 버전 범위와 다르다면 설치되지 않는다.

    7. npm uninstall 패키지명 : 해당 해키지를 제거하는 명령어이다. npm rm 패키지명 으로 쳐도 된다.

    8. npm search [검색어]로 npm의 패키지를 검색 할 수 있다.
    윈도나 맥에서는 브라우저를 통해 npm 공식 사이트에서 검색하면 편리할 것이다.
    gui가 없는 리눅스같은 곳에서는 해당 명령어로 찾아야한다.

    9. npm info [패키지명] 패키지의 세부 정보를 파악하고자 할 때 사용한다. 

    10. npm adduser : npm 로그인을 위한 명령어이다. 공식 사이트에서 가입한 계정으로 로그인하면 된다.
    나중에 패키지를 배포할 때 로그인이 필요하다. 패키지를 배포하지 않을 것이라면, 굳이 필요없다.
    이 명령어는 회원가입을 하는 게 아니다, 아이디는 이미 가입되어 있어야 한다.

    11. npm whoami : 현재 로그인한 아이디 보여줌 
        npm logout : 로그아웃
    
    12. npm version [버전] : package.json의 버전을 해당 버전으로 올린다. 
    원하는 버전의 숫자를 넣으면된다. 
    또는 major, minor, patch라는 문자열을 넣어서 해당 부분의 숫자를 1 올릴 수 있다.
    npm version 2.2.1 : 버전은 2.2.1로 만든다
    npm version minor : 마이너 자리의 버전을 1올린다.

    13. npm deprecate [패키지명][버전][메시지] : 해당 패키지를 설치할 때 경고 메시지를 띄우게 할 수 있다.
    자신의 패키지에만 이 명령어를 적용할 수 있다.

    14. npm publish : 자신이 만듬 패키지를 배포할 때 사용한다. 

    15. npm unpublish : 배포한 패키지를 제거할 때 사용한다. 24시간 이내에 배포한 패키지만 가능하다.

    16. npm ci : package.json대신 package-lock.json에 기반하여 패키지를 설치한다.
    더 엄격하게 버전을 통제하여 패키지를 설치하고 싶을 때 사용하면 된다. 

*/