// 패키지 관리하기
/*
    1. 프로젝트 마다 필요한 패키지를 하나씩 추가하면 100개를 출쩍 넘는다.
    2. 사용할 패키지는 저마다 고유한 버전도있다. 이를 어딘가 기록해야한다.
    3. 같은 패키지라도 버전별로 기능이 다를 수 있어서 동일한 버전으로 설치를 해야 한다.
    4. 이때 설치한 패키지의 버전을 관리하는 파일이 package.json이다.

    노드는 프로젝트를 시작하기 전에는 폴더 내부에 무조건 package.json부터 만들고 시작해야 한다.
    
    npm init
    를 하고 나면 다음과 같은 프로젝트 정보를 입력한다.
    package name : 프로젝트 이름 입력
    version      : 프로제트 버전 입력
    description  : 프로젝트 설명 입력
    entry command: index.js
    test command : 필요없으면 엔터키 입력
    git repository : 프로젝트를 깃에 올려 협업 할 시 사용
    keywords     : 걍 엔터키 입력, npm에서 패키지를 쉽게 찾을 수 있도록 해주는 키워드이다.
    author       : 제작자 혹은 프로젝트리더 이름 입력
    license      : 걍 엔터키 누르자

    이러면 package.json파일이 생성된다.


    라이선스에 대하여
    오픈소스라고 모든 패키지를 아무런 제약이 없이 사용할 수 있는 것은 아니다.
    라이선스 별로 제한 사항이 있다. 설치전에 반드시 알아봐야 한다.
    1. ISC, MIT BSD라이선스를 가진 패키지를 사용할 때는 사용한 패키지와 라이선스만 밝히면 자유롭게 사용할 수 있다.
    2. 아파치 라이선스 패키지는 사용은 자유롭지만, 특허권에 대한 제한이 있다.
    3. GPL라이선스 패키지를 사용할 때는 조심해야 한다.
    GPL계열의 패키지르 사용한 패키지를 배포할 때는 자신의 패키지도 GPL로 배포하고 소스 코드도 공개 해야 한다.
    4. 라이선스별도 특징이 다르므로 반드시 확인해야 상용 프로그램을 개발했을 때 법적 문제를 피할 수 있다.
*/

// audited 숫자 packages 경고에 대하여
/*
    npm에는 워낙에 많은 패키지가 있다보니 그중에는 악성코드가 숨겨있을 수 있다.
    이를 막기 위해 다음과 같은 명령어를 제공한다
    npm audit          >>>     내가 혹시 악성 코드가 담긴 패키지를 설치하였는지 검사한다.
    npm audit fix      >>>     스스로 수정할 수 있는 취약점을 수정한다.
    주기적으로 위의 명령어를 실행해서 혹시나 모를 보안사고를 예방하자     

*/


// --save 옵션에 대해서
/*
     npm install --save  이 옵션은 package.json의 dependencies에 패키지 이름을 추가하는 옵션이지만
     npm@5 부터는 기본값으로 설정되어 있으므로, 따로 칠 필요가 없다.

     다만 --save-dev 옵션은 다르다. 이 옵션은 개발용 패키지로 설치하라는 뜻이다.
     이는 실제 배포시에는 사용되지 않고 개발 중에만 사용되는 패키지이다.
*/



// package-lock.json 파일에 대해서
/*
    패키지들의 정확한 버전과, 의존 관계가 담겨 있다.
    npm으로 패키지를 설치, 수정, 삭제할 때마다 패키지들의 간의 내부 의존 관계를 이 파일에 저장한다.

*/


// 전역 설치에 대하여
/*
    1. 글로벌로 설치하면 프로젝트 내부 폴더의 node_modules에 설치하는게 아니라,
    /usr/local/lib/node_modules (맥기준) 에 설치한다.
    2. 이 폴더의 경로는 보통 시스템 환경변수에 등록되어 있으므로, 전역 설치한 패키지는 콘솔에서 명령어로 언제든 사용 가능 하다.
    3. 전역 설치를 했다고, 그 패키지를 모든 프로젝트에서 사용한다는 뜻이 아니다.
    4. 대부분은 그냥 명령어로 사용하기 위해 전역 설치를 한다.
*/



// rm -rf 와  npm install에 대하여
/*
    1. rm -rf 명령어는 맥과 리눅스계열에서 해당 폴더 자신과 그 안의 모든 파일과 하위 폴더를 다 삭제하는 명령어이다.
    2. 참고로 cd /home/test/deleteMe 로 가서
    rm -rf ./* 
    이와 같은 명령어로 deleteMe 폴더를 삭제하려고 하지말자.
    실수로 rm -rf . /* 을 치면      >>>  . 현재파일과, /* 루트 및 루트이하 모든 파일 이 삭제된다.

    3. rm -rf node_modules 를 치면 해당 폴더만 삭제된다. 
    4. 여기서 모듈을 모두 지웠어도 다시 npm install을 하게 되면 package.json기반으로 다시 node_modules폴더가
    생긴다.

*/


// 전역 설치가 좀 부담스러울 때
/*
    전역설치시에는, package.json에 기록되지 않는다. 따라서 다시 프로젝트를 설치할 때 어려움이 있기 때문이다.
    이러한 경우를 위한 명령어가 npx이다.

    npm install --save-dev rimraf   // 먼저 devDependencies에 기록한 후
    npx rimraf node_modules         // 해당 패키지 명령어를 쓸 때 npx명령어로 실행하면 된다.
    // 이렇게 하면 전역 설치를 안하고도 콘솔에서 명령어로 사용 할 수 있으며, package.json에 기록으로도 남는다.
*/


// npm 에 등록되지 않은 패키지
/*
    그러한 패키지는 대부분 깃에 있는데 이럴때는 이렇게 하면 된다.
    npm install [저장소 주소]  
    이러면 알아서 설치된다.
*/



// 명령어 줄여쓰기
/*
    install     >>> i,
    --save-dev  >>> -D,
    --global    >>> -g 
    로 줄여 써도 된다.
*/