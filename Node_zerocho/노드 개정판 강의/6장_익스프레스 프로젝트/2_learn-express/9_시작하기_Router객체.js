// Router 객체로 라우팅 분리하기

const router = require("./9_routes");

// 4장에서 순수하게 node 내장 함수로만 라우터를 만들 때에는 요청 메서드와 주소별로 분기 처리를 하느라 코드가 복잡했다.
// 익스프레스를 사용하면 깔끔하게 라우팅을 관리 할 수 있다.

// app.get() 같은 메서드가 다 라우터 부분이다.
// 라우터를 많이 연결하면  라우터를 담고 있는 파일( 대부분 app.js )코드가 매우 길어지므로 
// 익스프레스에서는 라우터를 분리할 수 있는 방법을 제공한다.

// routes폴더를 만들고 그 안에 index.js와 user.js를 만들어 보자
// 9_app.js에 위의 두 외부 라우터를 연결해보자


// next() 함수에 대해
/*
    1. next()는 다음 미들웨어로 연결하는 함수이다.
    2. 인수를 넣으면 한가지 기능이 있다.
    next('route') 기능이다.
    다음 미들웨어가 아닌, 다음 라우터로 넘기는 함수이다.
    따라서 라우터에 연결된 나머지 미들웨어들을 건너뛰고 싶을 때 사용한다.

*/
// 다음 예시를 보고 배우자
router.get('/', function(req, res, next){
    next('route');
    // 이제이 다음 미들웨어들은 실행되지 않는다.
}, function(req, res, next){
    console.log('실행되지 않는다.');
}, function(req, res, next){
    console.log("실행되지 않는다.");
    next();
});

// 바로 이쪽 다음 라우터로 넘어간다. 요청주소가 같기 때문에, 이 라우터도 실행된다.
router.get('/', function(req, res) {
    console.log('실행 된다.');
    res.send('hello, Express');
});

// 이처럼 같은 요청 주소의 라우터를 여러 개 만들어도 아무 문제 없다. 순서대로 작동 된다.
// 다만 next(), next('route') 함수를 반드시 써주고, 
// 반드시 마지막에는 요청에 대한 응답을 해줘야 한다는 것. 이것만 잊어 먹지 않으면 된다.



// 또한 유용하게 쓰이는 라우터 매개변수 주소패턴이 있는데, 자주 쓰이므로 배워두자.
router.get('/user/:id', (req, res) => {
    console.log(req.params, req.query);
});
// :id는 문자 그대로 id를 의미하는게 아니다. 마치 변수처럼 쓸 수있는 것이다.
// /user/123 이나, /user/38234 등등 다양한 주소까지 이 요청주소에 매칭된다.
// 그리고 id로 들어온 값은 마치 변수처럼 req.params객체 안에 있다.
/*
    1. req.params.id
    2. 만약 /user/:something 이었다면, req.params.something 으로 조회할 수 있다.
    3. 주의 할 점이 있다.
    일반 라우터 보다 뒤에 위치해야 한다는 점이다.
    그 이유는 마치 변수처럼 다양한 주소에 다 매칭이 되므로, 이 라우터가 맨 위에 있다면 
    /user로 시작하는 모든 주소요청이 다 이곳으로 오기 때문이다.
    때문에 일반 라우터보다는 뒤에 위치해야 다른 라우터를 방해하지 않는다.
*/

// 이럴 경우가 있으므로 라우트매개변수를 사용하는 경우 가장 밑으로 위치시켜야한다.
router.get('/user:id', (req, res)=>{
    console.log("얘만 실행됩니다.");
});
router.get('/user/like', (req,res)=>{
    console.log('여기는 실행되지 않는다.');
});





// 없는 요청 주소(= 일치하는 라우터가 없을 경우)에 대한 라우터 처리
// 익스프레스 자체적으로 404에러를 처리하기는 하지만 웬만하면 404응답 미들웨어와 에러 처리 미들뤠어를 
// 연결해주는 것이 좋다.
app.use((req, res, next)=>{
    res.status(404).send("Not Found");
});





// 다음과 같이 주소는 같지만, 메서드가 다른 코드가 있을 때 이를 하나의 덩어리로 줄일 수 있다.
router.route('/abc')
    .get( (req, res)=> {
        res.send('GET /abc');
    })
    .post( (req, res) => {
        res.send('POST /abc');
    });
// 위처럼 하면 메소드의 방식 따라 알아서 해당하는 메소드로 매칭된다.