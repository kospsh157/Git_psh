// 이번에는 정말 예측이 불가능한 에러를 처리하는 방법을 보자.


process.on('uncaughtException', (err) => {
    console.log('예기치 못한 에러', err);
});

setInterval( () => {
    throw new Error('서버를 고장내주마!');
}, 1000);

setTimeout(()=>{
    console.log('실행됩니다.');
}, 2000);


// 1초 마다 에러가 발생되고 throw 한다. 
// 처음 2초 후에 '실행됩니다'가 표시된다.

// 만약 노드프로세스가 중지된다면 실행됩니다. 라는 문구는 한번도 실행이 되지 못한다.
// process.on() 리스너를 달았는데, 예기치 못한 에러에 대한 에러를 처리하는 핸들러을 달았다. 
// 따라서 예기치 않은 에러가 생겨도 프로세스는 종료되지 않는다. 

// 겉보기에는 process.on()에 uncaughtException 이벤트 리스너를 달아두는게 만병통치약처럼 보인다.
// 하지만 공식 문서에서는 최후의 방법으로 쓰라고 명시되어 있다.
// 저 안의 핸들러는 반드시 실행된다는 보장이 없다.
// 따라서 단순히 에러 내용을 기록하는 용도로 사용하고, 에러를 기록한 후 process.exit() 으로 프로세스를 종료하는 것이 좋다.
// 에러를 빨리 찾아서 빨리 수정하도록 하는 것이다.

// 서버 운영은 에러와의 싸움이다.
// 시간이나 비용 인력 등의 제약 아래에서, 미처 대비하지 못한 에러를 철저히 기록하는 습관이 중요하다. 
// 주기적으로 로그를 확인하면서 보완해나가야 한다. 
// 서버가 에러로 인해 종료되었을 때, 자동으로 재시작하는 방법도 있다. 