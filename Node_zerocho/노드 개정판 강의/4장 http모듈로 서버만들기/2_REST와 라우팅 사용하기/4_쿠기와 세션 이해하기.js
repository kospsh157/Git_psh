// 쿠키 세션
/*  
    클라이언트에서 보내는 요청에는 한 가지 큰 단점이 있다. 
    바로 누가 요청을 보내는 모른다는 것이다.

    물론 요청을 보내는 주소 ip나 브라우저의 정보를 받아올 수는 있다. 하지만 여러 컴퓨터가 공통으로 ip주소를 가지거나, 
    한 컴퓨터를 여러 사람이 사용하게 되면 누가 누군지 서버쪽에서는 구분할 수 없다.

    그렇다면 로그인을 구현하면 되지 않는냐고 생각할 수 있다. 정답이다.
    하지만 로그인을 구현하려면 쿠기와 세션에 대해 알고있어야 한다.

    로그인한 후에는 새로고침을 해도 로그아웃이 되지 않는다. 클라이언트가 서버에 계속 내가 누군지 지속적으로 알려주고 있기 때문이다.
    클라이언트가 누구인지 기억하기 위해서 서버는 요청에 대한 응답을 할 때 쿠키라는 것을 같이 보낸다. 
    쿠키는 유효기간이 있고 구조는 다음과 같다.
    name = zerocho 단순히 키-값 쌍이다.
    서버로부터 쿠키가 오면 웹브라우저는 쿠키를 저장해두었다가 다음에 요청할 때마다 쿠키를 동봉해서 보낸다.
    서버는 그 쿠키를 다시 읽고 사용자가 누구인지 파악한다.

    브라우저는 쿠키가 있으면 자동으로 동봉해서 보내준다. 따라서 따로처리할 필요가 없다.
    최초로 쿠키를 발행해서 서버에서 브라우저로 쿠키를 보낼 때만 우리가 코드를 작성해야한다.

    쿠키는 요청의 헤더에 담겨 전송된다.
    브라우저에는 응답의 헤더에 따라 쿠키를 저장한다. 

    다음 코드로 서버에서 직접 쿠키를 만들어 요청자의 브라우저에 넣어보도록 하자.
*/

const http = require('http');

http.createServer( (req, res)=>{
    console.log(req.url, req.headers.cookie);
    res.writeHead(200, {'Set-Cookie' : 'mycookie=test'});
    res.end("Hello Cookie");

})
    .listen(8080, () => {
        console.log('8080서버 대기 중..');
    });

// 설명 
/*
    1. 위를 실행하면 콘솔로 다음과 같이 나온다 
    / undefined
    /favicon.ico { mycookie: 'test'}

    2. 첫 번째 요청에는 당연이 요청쪽 헤더에 쿠키가 없다.
    하지만 첫 번째 요청 때 서버가 응답으로 쿠키를 준다.
    따라서 두 번째 요청부터는 요청헤더에 쿠기가 보인다.

    3. 왜 자동으로 2번 요청이되는지는 favicon.ico에 있다. 파비콘은 사이트에 상징인 이미지이다.
    해당 이미지를 서버에서 주지 않으면 브라우저는 자동으로 한 번 더 favicon을 요청하는 요청을 보낸다.
    따라서 자동으로 2번의 요청이 되며, 두 번째 순간 부터는 쿠키가 자동으로 포함되어 요청되기 때문에 쿠키가 보인다.

    지금은 단순히 쿠키만 심었을 뿐, 그 쿠키가 누가누구인지를 식별해주지 않는다. 다음 예제에서 그것을 살펴보자
*/